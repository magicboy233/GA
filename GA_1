
import numpy as np
import matplotlib.pyplot as plt

DNA_SIZE = 10
POP_SIZE = 100
CROSS_RATE = 0.9
N_GENERATION = 300
X_BOUND = [0, 5]
MUTATE_RATE = 0.005

def f(x):
    return np.sin(x) + (x*np.cos(x))

def g(x):
    return -(np.sin(x) + (x*np.cos(x)))

def translateDNA(pop):
    return (pop.dot(2**np.arange(DNA_SIZE)[::-1])/float(2**DNA_SIZE-1)*X_BOUND[1])

def mutate(child):
    for point in range(DNA_SIZE):
        if np.random.rand() < MUTATE_RATE:
            child[point] = 0 if child[point] == 1 else 1
    return child

def crossover(parent, pop):
    if np.random.rand() < CROSS_RATE:
        index = np.random.randint(0, POP_SIZE, size=1)
        cross_points = np.random.randint(0, 2, size=DNA_SIZE).astype(np.bool)
        parent[cross_points] = pop[index, cross_points]
    return parent

def select(pop, fitness):
    index = np.random.choice(np.arange(POP_SIZE), size=POP_SIZE, replace=True, p = fitness/fitness.sum())
    return pop[index]

def getFitness(pred):
    return pred-np.min(pred)+1e-3

pop = np.random.randint(0, 2, (1, DNA_SIZE)).repeat(POP_SIZE, axis=0)


plt.ion()
x = np.linspace(*X_BOUND, 200)
plt.plot(x, -g(x)) # max:f(x) ; min:-g(x)

for _ in range(N_GENERATION):
    f_values = f(translateDNA(pop))

    if 'sca' in globals(): sca.remove()
    sca = plt.scatter(translateDNA(pop), f_values, s=50, lw=0, c='red', alpha=0.5);

    fitness = getFitness(-f_values) # max:f_values ; min:-f_values
    print("Most fitted DNA:", pop[np.argmax(fitness), :])
    print(" ")

    pop = select(pop, fitness)
    pop_copy = pop.copy()
    for parent in pop:
        child = crossover(parent, pop)
        child = mutate(child)
        parent[:] = child


plt.ioff();plt.show()
